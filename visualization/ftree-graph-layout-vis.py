'''
===================
Fat-Tree Graph Plot
===================
This script parses connection files for the fat-tree model to visualize
the simulated fat-tree network layout
Connection files are generated and dumped inside the lp-io-dir if you set
'#define FATTREE_CONNECTIONS 1' at the top of src/networks/model-net/fattree.c
Currently only single rail/plane configurations are supported
Saves the generated plot to current working directory
'''
import networkx as nx
import argparse
from pathlib import Path
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import csv
import pdb

# Parse commandline arguments
parser = argparse.ArgumentParser()
parser.add_argument('--lp-io-dir', action='store', dest='lpIoDir',
                    help='path to the directory containing all modelnet sim data.\nIt can be the lp-io directory for one run or a higher level directory with many lp-io dirs within')
parser.add_argument('--visualize-sim', action='store_true', default=False, dest='pltIndividually',
                    help='If selected, plots each figure individually')
results = parser.parse_args()
print 'lp io dir          =', results.lpIoDir
#rootdir = Path(lpIoDir)
#dir_list = [f for f in rootdir.glob('**/*') if f.is_dir()]

filePath = '../../fit-fly-results/ftree2-3240nodes-static-none-15000000end-65536vc-12.5GBps-synthetic-traffic1-load0.95/'
filePath = '../../codes-nemo-results/hybrid-bugfix2/ftree2-3240nodes-static-adaptive-100000000end-65536vc-12.5GBps-CONT-trace-mg1k/'
numIter = 1    #Number of iterations for force directed and spring layouts

# Simulation Params
k = 36                  # Switch radix
reps = 180              # Number of model-net reps (from network config file)
numLevels = 3           # Number of levels/layers of switches in the fat-tree
numPlanes = 1           # Number of planes/rails in sumulation (currently only support one)
numTerminals = 18       # Number of terminals/modelnet_fattree's per repetition (from network config file)
# Plot Params
plotType = "spring"    # Options: layered, spring, circular, force, random, shell, graphviz
exportGEXF = 1          # If true, exports the network in the Graph Exchange XML format (GEXF) for reading into Gephi or other application
exportGRAPHML = 0
w = 80                  # Width of figure
h = w/2                 # Height of figure

numNodes = 180*numTerminals
numSwitches = reps*numLevels

# Extract fattree-switch-traffic file header
inFile = open(filePath+'/fattree-switch-traffic', 'r')
line = inFile.readline()
line = line.strip()
temp = line.replace('# Format','')
temp = temp.replace(' <','')
temp = temp.replace('>',',')
switchTrafficHeader= temp.split(",")
del switchTrafficHeader[-1]

# Parse traffic data
print 'Parsing fattree-switch-traffic data...'
switchTrafficDataTemp = {}
while True:
    line = inFile.readline()
    if not line: break
    line = line.strip()
    temp = line.split(" ")
    routerID = int(temp[3]) + int(temp[1])*numSwitches
    temp = [float(i) for i in temp[4:]]
    temp = sum(temp)
    switchTrafficDataTemp[routerID+numNodes] = temp
inFile.close()

# Extract model-msg-stats file header
inFile = open(filePath+'/fattree-msg-stats', 'r')
line = inFile.readline()
line = line.strip()
temp = line.replace('# Format','')
temp = temp.replace(' <','')
temp = temp.replace('>',',')
temp = temp.replace('Total Data Size','Data Per Terminal [bytes]')
temp = temp.replace('Total Packet Latency','Aggregate Packet Latency [ns]')
temp = temp.replace('# Flits/','')
temp = temp.replace('hops','Hops')
temp = temp.replace('Busy Time','Terminal Busy Time [us]')
temp = temp.replace('End Time','End Time [ms]')
temp = temp.replace('Packets Generated', 'Packets Generated [1e3]')
temp = temp.replace('Packets finished', 'Packets Finished [1e3]')
msgHeader = temp.split(",")
del msgHeader[-1]
# Parse model-msg-stats data
met = 5
print 'Parsing fattree-msg-stats data...'
while True:
    line = inFile.readline()
    if not line: break
    line = line.strip()
    temp = line.split(" ")
    terminalID = int(temp[1])
    #temp = [float(i) for i in temp]
    if temp[met] == '-nan' or temp[met] == 'nan':
        takingUpSpace = 1
    else:
        switchTrafficDataTemp[terminalID] = float(temp[met])
inFile.close()

# Input Down Connections file
f = open(filePath + 'fattree-config-down-connections', 'rb')
data = csv.reader(f)
for row in data:
    down = row

# Delete extra space generated by extra comma at end of file
if down[-1] == ' ':
    del down[-1]
# Convert string list to integer list
down = map(int, down)

# Input Up Connections file
f = open(filePath + 'fattree-config-up-connections', 'rb')
data = csv.reader(f)
for row in data:
    up = row

# Delete extra space generated by extra comma at end of file
if up[-1] == ' ':
    del up[-1]

# Convert string list to integer list
up = map(int, up)

# Concatenate all connections lists
connections = up+down

# Construct list of unique nodes from connections list
nodes = []
for i in connections:
    if i not in nodes:
        nodes.append(i)
nodes = sorted(nodes, key=int)

# Create Matplotlib figure
fig, ax = plt.subplots(figsize=(w, h))

# Construct graph
G=nx.Graph()
for i in nodes:
    G.add_node(i)
    if i < numNodes:
        G.node[i]['viz'] = {'color': {'r': 255, 'g': 0, 'b': 0, 'a': 0.6}}
    else:
        G.node[i]['viz'] = {'color': {'r': 0, 'g': 255, 'b': 0, 'a': 0.6}}
for i in range(0,len(connections),2):
    if connections[i] < numNodes or connections[i+1] < numNodes:
        G.add_edge(connections[i],connections[i+1],weight=1)
    else:
        G.add_edge(connections[i],connections[i+1],weight=2)

nx.set_node_attributes(G, 'traffic', switchTrafficDataTemp)

# Compute LP_type IDs
terminalIds = []
switchIds = []
terminalIds =  range(0,numTerminals*reps)
for i in range(numLevels*numPlanes):
    switchIds.append(range(numTerminals*reps + i*reps,numTerminals*reps + (i+1)*reps))
terminalIds = sorted(terminalIds, key=int)

# Compute positions in graph
pos = {}
l = w
n = len(terminalIds)
dx = float(float(l)/float(n))
y = 0
count = 0
for i in range(0,len(terminalIds)):
    x = float(i)*dx
    pos[terminalIds[i]] = [x,y]
    count += 1
for j in range(0,numLevels*numPlanes):
    n = len(switchIds[j])
    dx = float(float(l)/float(n))
    if j == 5 or j == 2:
        dx = dx * 1.5
    if j<3:
        y = j + 1
    else:
        y = numLevels - j - 1
    for i in range(0,len(switchIds[j])):
        x = float(i)*dx
        pos[switchIds[j][i]] = [x,y]
    count += 1

# Visualize graph
# Standard multi-level tree layout
if plotType == "layered":
    nx.draw(G,pos)
    nx.draw_networkx_labels(G,pos)
# Spring Layout
if plotType == "spring":
    pos=nx.spring_layout(G,iterations=numIter,scale=1,dim=3)
    #nx.draw(G,pos)
    #nx.draw_networkx_labels(G,pos)
    # Add positions to each node
    #nx.set_node_attributes(G,'pos',pos)
    for node,(x,y,z) in pos.items():
        G.node[node]['x'] = float(x)
        G.node[node]['y'] = float(y)
        G.node[node]['z'] = float(z)
# Force Directed Layout
if plotType == "force":
    pos = nx.fruchterman_reingold_layout(G,iterations=numIter,scale=10)
    nx.draw(G,pos)
    nx.draw_networkx_labels(G,pos)
# Random Layout
if plotType == "random":
    nx.draw_random(G)
# Circular Layout
if plotType == "circular":
    nx.draw_circular(G)
# Shell Layout (Concentric circles)
if plotType == "shell":
    nx.draw_shell(G)
# Graphviz Layout
if plotType == "graphviz":
    nx.draw_graphviz(G)

# Clean and Save Figure
plt.tight_layout()
fig.savefig('fat-tree-layout-'+plotType+'.pdf', dpi=320, facecolor='w',
    edgecolor='w', orientation='portrait', papertype=None,
    format=None, transparent=False, bbox_inches=None,
    pad_inches=0.25, frameon=None)

# Save graph in GEXF format
if exportGEXF == 1:
    nx.write_gexf(G,filePath+'ftree'+str(numNodes)+'.gexf')
if exportGRAPHML == 1:
    nx.write_graphml(G,'ftree.graphml')
